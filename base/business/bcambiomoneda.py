'''
created by edgard.ramos (ismytv@gmail.com)
generated by alice.bash.v.2203a
__date__
'''
from django.db import transaction
from base.libs.table import Table
from base import config as PARAMS
from base.models import CambioMoneda
from base.business.bcuenta import BCuenta
from base.business.bmovimiento import BMovimiento
from base.choices import TipoMovimientoChoices, TipoOperacionChoices

class BCambioMoneda(Table):
    aMessage = []           # lista de mensajes

    def __init__(self):
        self.TO = CambioMoneda
        self.message_tablename = self.TO._meta.verbose_name
        self.aMessage = []

    def get_aTO_toArray(self):
        array = list()
        for oTO in self.aTO:
            array.append(self.get_oTO_toDict(oTO))
        return array
    
    def get_oTO_toDict(self, oTO:CambioMoneda):
        # acá se genera diccionario con los atributos a retornar
        return {
            'id':oTO.id,
            'cuenta_origen':oTO.cuenta_origen,
            'cuenta_origen_desc':self.get_cuenta_desc(oTO.cuenta_origen),
            'cuenta_destino_efectivo':oTO.cuenta_destino_efectivo,
            'cuenta_destino_banco':oTO.cuenta_destino_banco,
            'monto_cambiar':oTO.monto_cambiar,
            'tipo_cambio':oTO.tipo_cambio,
            'monto_cambiado':oTO.monto_cambiado,
            'monto_deposito_efectivo':oTO.monto_deposito_efectivo,
            'monto_deposito_banco':oTO.monto_deposito_banco,
        }

    ''' ----------------------
        Métodos personalizados
    '''
    def _set_oTO(self, oTO:CambioMoneda, data:dict(), mode, request):
        '''
            Personalizar oTO
        '''
        
        oTO.cuenta_origen = data['cuenta_origen']
        oTO.cuenta_destino_efectivo = data['cuenta_destino_efectivo']
        oTO.cuenta_destino_banco = data['cuenta_destino_banco']
        oTO.monto_cambiar = data['monto_cambiar']
        oTO.tipo_cambio = data['tipo_cambio']
        oTO.monto_deposito_efectivo = data['monto_deposito_efectivo']
        oTO.monto_deposito_banco = data['monto_deposito_banco']
        oTO.monto_cambiado = data['monto_cambiar'] * data['tipo_cambio']

        if mode != 'new':
            oTO.user_edit_id = request.user.id
        else:
            oTO.user_created_id = request.user.id
            oTO.license_id = request.user.license_id
        return oTO
    
    def validate(self, data:list()):
        self.aMessage = []
        return True

    @transaction.atomic
    def save(self, request, mode, id, data:dict()):
        ok = False
        if mode == 'new' :
            # Save CambioMoneda
            oTO = self.TO()
            oTO = self._set_oTO(oTO, data, mode, request)
            ok = self.insert(oTO)

            # Save movimientos
            id_movimiento = self.id
            oBCuenta = BCuenta()
            # 1. Save egreso cuenta origem
            oBCuenta = BCuenta()
            oTOCuenta = oBCuenta.get(oTO.cuenta_origen)
            data = {
                'id_movimiento': id_movimiento,
                'tipo_movimiento': TipoMovimientoChoices.egreso,
                'tipo_operacion': TipoOperacionChoices.cambio_moneda,
                'cuenta': oTOCuenta,
                'monto': oTO.monto_cambiar,
            }
            oBMovimiento = BMovimiento()
            oBMovimiento.save(request, mode, 0, data)
            # 1.1. Update saldo cuenta
            oTOCuenta.saldo -= oTO.monto_cambiar
            oBCuenta.update(oTOCuenta)

            # 2. Save ingreso cuenta destino efectivo
            oTOCuenta = oBCuenta.get(oTO.cuenta_destino_efectivo)
            data = {
                'id_movimiento': id_movimiento,
                'tipo_movimiento': TipoMovimientoChoices.ingreso,
                'tipo_operacion': TipoOperacionChoices.cambio_moneda,
                'cuenta': oTOCuenta,
                'monto': oTO.monto_deposito_efectivo,
            }
            oBMovimiento = BMovimiento()
            oBMovimiento.save(request, mode, 0, data)
            # 2.1. Update saldo cuenta
            oTOCuenta.saldo += oTO.monto_deposito_efectivo
            oBCuenta.update(oTOCuenta)
            
            # 3. Save ingreso cuenta destino banco
            oTOCuenta = oBCuenta.get(oTO.cuenta_destino_banco)
            data = {
                'id_movimiento': id_movimiento,
                'tipo_movimiento': TipoMovimientoChoices.ingreso,
                'tipo_operacion': TipoOperacionChoices.cambio_moneda,
                'cuenta': oTOCuenta,
                'monto': oTO.monto_deposito_banco,
            }
            oBMovimiento = BMovimiento()
            oBMovimiento.save(request, mode, 0, data)
            # 3.1. Update saldo cuenta
            oTOCuenta.saldo += oTO.monto_deposito_banco
            oBCuenta.update(oTOCuenta)

            ok = True
        
        else: # edit
            oTO = self.get(id)
            if oTO == None:
                self.message = f'No se encontro registro con id={id}'
                self.error_code = PARAMS.ErrorCode.not_found
            else:
                oTO = self._set_oTO(oTO, data, mode, request,)
                ok = self.update(oTO)
            
        return ok
    
    def get_all(self, license_id:int=None):
        if license_id == None:
            self.aTO = self.TO.objects.all().order_by('date_created')
        else:
            self.aTO = self.TO.objects.all().filter(license_id=license_id).order_by('date_created')
        return self.aTO
    
    def get_cuenta_desc(self, id):
        oBCuenta = BCuenta()
        return oBCuenta.get_desc(id)

