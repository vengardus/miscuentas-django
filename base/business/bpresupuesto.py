'''
created by edgard.ramos (ismytv@gmail.com)
generated by alice.bash.v.2203a
__date__
'''
from datetime import datetime
from base.libs.table import Table
from base import config as PARAMS
from base.models import Presconcepto, Presupuesto
from base.choices import CalendarChoices, MonedaChoices, TipoMovimientoChoices
from base.business.bpresconcepto import BPresconcepto
from base.business.bcompra import BCompra

class BPresupuesto(Table):
    aMessage = []           # lista de mensajes

    def __init__(self):
        self.TO = Presupuesto
        self.message_tablename = self.TO._meta.verbose_name
        self.aMessage = []

    def get_aTO_toArray(self):
        array = list()
        for oTO in self.aTO:
            array.append(self.get_oTO_toDict(oTO))
        return array
    
    def get_oTO_toDict(self, oTO:Presupuesto):
        # acá se genera diccionario con los atributos a retornar
        print('EDDD:', oTO.monto_final, type(oTO.monto_final))
        return {
            'id':oTO.id,
            'presconcepto_desc':oTO.presconcepto.desc,
            'monto':oTO.monto,
            'monto_final':float(oTO.monto_final),
            'anio':oTO.anio,
            'mes':oTO.mes,
            'mes_glosa':f"{CalendarChoices.get_month_desc(oTO.mes)} '{oTO.anio}",
            'mes_glosa_abrev':f"{CalendarChoices.get_month_desc(oTO.mes)[0:3]} '{oTO.anio}",
            'tipo_movimiento': oTO.presconcepto.presrubro.tipo_movimiento,
            'tipo_movimiento_desc': TipoMovimientoChoices.get_desc(oTO.presconcepto.presrubro.tipo_movimiento),
        }

    ''' ----------------------
        Métodos personalizados
    '''
    def _set_oTO(self, oTO:Presupuesto, data:list(), mode, request):
        '''
            Personalizar oTO
        '''
        
        oTO.anio = data['anio']
        oTO.mes = data['mes']
        oTO.presconcepto = data['presconcepto']
        oTO.monto = data['monto']
        oTO.moneda = data['moneda']
        oTO.tipo_cambio = data['tipo_cambio']
        oTO.monto_final = (oTO.monto * oTO.tipo_cambio) if oTO.moneda != MonedaChoices.moneda_local else oTO.monto

        if mode != 'new':
            oTO.user_edit_id = request.user.id
        else:
            oTO.user_created_id = request.user.id
            oTO.license_id = request.user.license_id
        return oTO
    
    def validate(self, data:list()):
        self.aMessage = []
        return True

    def save(self, request, mode, id, data:list()):
        ok = False
        if mode == 'new' :
            oTO = self.TO()
            oTO = self._set_oTO(oTO, data, mode, request)
            ok = self.insert(oTO)
        
        else: # edit
            oTO = self.get(id)
            if oTO == None:
                self.message = f'No se encontro registro con id={id}'
                self.error_code = PARAMS.ErrorCode.not_found
            else:
                oTO = self._set_oTO(oTO, data, mode, request,)
                ok = self.update(oTO)
            
        return ok
    
    def get_all(self, license_id:int=None):
        if license_id == None:
            self.aTO = self.TO.objects.all().order_by('anio', 'mes', 
                    '-presconcepto__presrubro__tipo_movimiento', 
                    'presconcepto__presrubro__id',
                    'date_created')
        else:
            self.aTO = self.TO.objects.all().filter(license_id=license_id).order_by(
                    'anio', 'mes', 
                    '-presconcepto__presrubro__tipo_movimiento', 
                    'presconcepto__presrubro__id',
                    'date_created')
        return self.aTO
    
    def generar_presupuesto(self, request):
        oBPresconcepto = BPresconcepto()
        aPresconcepto = oBPresconcepto.get_all(license_id=request.user.license_id)
        self.get_all(license_id=request.user.license_id)
        anio = str(datetime.now().year)
        # mes = CalendarChoices.month_choices[3][0]
        oBCompra = BCompra()
        aCierre_compras = oBCompra.generar_cierre(request.user.license_id)
        aMensaje = []
        for item in aCierre_compras:
            mes = str(item['fecha_pago'].month).zfill(2)
        
            #...Crear conceptos en presupuesto para el anio mes
            # filtrar conceptos que no tengan registro en presupuesto para el anio mes
            aPresupuesto_aniomes = list(map(
                    lambda x:x.presconcepto.id, 
                    filter(lambda x:x.anio==anio and x.mes==mes, self.aTO)
            ))
            aPresconcepto_filter = list(filter(
                    lambda x: x.id not in list(aPresupuesto_aniomes), 
                    aPresconcepto
            ))

            # para cada elemento del filtro insertar en Presupuesto 
            data = {}
            item:Presconcepto
            for item in aPresconcepto_filter:
                monto = item.monto_defecto
                if item.is_tarjeta:
                    fecha_pago = datetime(int(anio), int(mes), item.tarjeta.dia_pago).date()
                    aCierre_compras_filter = list(filter(lambda x:x['fecha_pago']==fecha_pago, aCierre_compras))
                    monto = 0
                    if aCierre_compras_filter:
                        monto = aCierre_compras_filter[0]['monto'] 
                data = {
                    'anio':anio,
                    'mes':mes,
                    'presconcepto':item,
                    'monto':monto,
                    'moneda':item.moneda,
                    'tipo_cambio':item.tipo_cambio,
                    'monto_final':monto

                }
                if self.save(request, 'new', 0, data) :
                    aMensaje.append(f'insert: {data["anio"]},{data["mes"]} ,{item.desc}')
        return aMensaje

# 100   60  -30  +6 + 20    
# 50    26   +30  -6  