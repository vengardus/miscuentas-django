'''
created by edgard.ramos (ismytv@gmail.com)
generated by alice.bash.v.2203a
__date__
'''
from django import forms
from django.utils.translation import gettext_lazy as _
from django.core.exceptions import ValidationError
from base.models import CambioMoneda
from base.business.bcuenta import BCuenta

 
class CambioMonedaForm(forms.ModelForm):
    
    def __init__(self, request, *args, **kwargs):
        self.request = request
        print(self.request.user.license_id)
        super().__init__(*args, **kwargs)
        self.set_data()

    def set_data(self):
        oBCuenta = BCuenta()
        oBCuenta.get_all(self.request.user.license_id)
        CuentasMonExtranjeraChoices = oBCuenta.get_cuentas_by_moneda_choices(is_moneda_local=False)
        CuentasDestinoEfectivoChoices = oBCuenta.get_cuentas_by_destino_choices(is_efectivo=True)
        CuentasDestinoBancoChoices = oBCuenta.get_cuentas_by_destino_choices(is_efectivo=False)
        self.fields['cuenta_origen'] = forms.ChoiceField(choices=CuentasMonExtranjeraChoices)
        self.fields['cuenta_destino_efectivo'] = forms.ChoiceField(choices=CuentasDestinoEfectivoChoices)
        self.fields['cuenta_destino_banco'] = forms.ChoiceField(choices=CuentasDestinoBancoChoices)
        
        self.fields['cuenta_origen'].widget.attrs['autofocus'] = True

    
    class Meta:
        model = CambioMoneda
        fields = [  'cuenta_origen', 'monto_cambiar', 'tipo_cambio', 
                    'monto_deposito_efectivo', 'cuenta_destino_efectivo', 
                    'monto_deposito_banco', 'cuenta_destino_banco'
        ]
        
        # error_messages = {
        #     'desc': {
        #         'unique': _("Ya existe rubro con esa descripci√≥n."),
        #     },
        # }

    def clean(self):
        print(self.cleaned_data['cuenta_origen'])
        print(self.cleaned_data['monto_cambiar'])
        print(self.cleaned_data['tipo_cambio'])
        print(self.cleaned_data['cuenta_destino_efectivo'])
        print(self.cleaned_data['monto_deposito_efectivo'])
        print(self.cleaned_data['cuenta_destino_banco'])
        print(self.cleaned_data['monto_deposito_banco'])

        if self.cleaned_data['monto_cambiar'] <= 0:
            raise ValidationError("Monto a cambiar debe ser mayor a 0")
        if self.cleaned_data['monto_cambiar'] <= 0:
            raise ValidationError("Monto a cambiar debe ser mayor a 0")
        
        return super().clean()
    
